{"version":3,"file":"static/js/544.ea01754a.chunk.js","mappings":"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","sources":["components/MoviesList/MoviesList.styled.jsx","components/MoviesList/MoviesList.jsx","pages/Home/Home.jsx","services/fetchApi.js"],"sourcesContent":["import { NavLink } from 'react-router-dom';\nimport styled from 'styled-components';\n\nexport const Link = styled(NavLink)`\n  color: black;\n  text-decoration: none;\n`;\n\nexport const Container = styled.div`\n  max-width: 1200px;\n  padding: 20px;\n`;\n\nexport const MoviesGallegy = styled.ul`\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr 1fr 1fr;\n  gap: 18px;\n  row-gap: 24px;\n`;\n\nexport const MovieItem = styled.li`\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  transition: scale 250ms linear;\n  max-height: 380px;\n  &:hover {\n    scale: 1.1;\n  }\n`;\n\nexport const MovieName = styled.p`\n  font-size: 14px;\n  font-weight: 600;\n  max-width: 215px;\n  max-height: 43px;\n  padding: 12px 4px;\n`;\n","import { useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport {\n  MoviesGallegy,\n  Container,\n  MovieName,\n  MovieItem,\n  Link,\n} from './MoviesList.styled';\n\nexport const MoviesList = ({ movies }) => {\n  const location = useLocation();\n  const poster = poster_path => {\n    if (poster_path === null) {\n      return 'https://via.placeholder.com/300sx450.jpg';\n    }\n    return `https://image.tmdb.org/t/p/w300${poster_path}`;\n  };\n  return (\n    <Container>\n      <MoviesGallegy>\n        {movies.map(\n          ({ id, original_title, original_name, name, title, poster_path }) => (\n            <MovieItem key={id}>\n              <Link to={`/movies/${id}`} state={{ from: location }}>\n                <img\n                  src={`${poster(poster_path)}`}\n                  alt={`${title || original_title || name}`}\n                />\n                <MovieName>{original_title || original_name}</MovieName>\n              </Link>\n            </MovieItem>\n          )\n        )}\n      </MoviesGallegy>\n    </Container>\n  );\n};\n\nMoviesList.propTypes = {\n  movies: PropTypes.array.isRequired,\n};\n","import { useEffect, useState } from 'react';\nimport { MoviesList } from 'components/MoviesList/MoviesList';\nimport { fetchTrendingMovies } from 'services/fetchApi';\n\nconst Home = () => {\n  const [trendingMovies, setTrendingMovies] = useState([]);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    try {\n      const getTrendingMovies = async () => {\n        const data = await fetchTrendingMovies();\n        setTrendingMovies(data.results);\n      };\n      getTrendingMovies();\n    } catch (error) {\n      setError(error);\n    } finally {\n    }\n  }, []);\n\n  return (\n    <main>\n      {error && <p>Try again</p>}\n      <h2>Trending movies</h2>\n\n      {trendingMovies && <MoviesList movies={trendingMovies} />}\n    </main>\n  );\n};\n\nexport default Home;\n","import axios from 'axios';\n\nconst APY_KEY = '0214e4f6556edfc65f2eadfc23b43510';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nexport async function fetchTrendingMovies() {\n  const params = {\n    api_key: APY_KEY,\n    language: 'en-US',\n  };\n\n  const response = await axios.get('/trending/all/day', { params });\n  const data = response.data;\n\n  return data;\n}\n\nexport async function fetchMovieById(movieId) {\n  const params = {\n    api_key: APY_KEY,\n    language: 'en-US',\n  };\n\n  const response = await axios.get(`/movie/${movieId}`, { params });\n  const data = response.data;\n\n  return data;\n}\n\nexport async function fetchMovieByName(movieName) {\n  const params = {\n    api_key: APY_KEY,\n    language: 'en-US',\n    query: movieName,\n  };\n\n  const response = await axios.get(`/search/movie`, { params });\n  const data = response.data;\n\n  return data;\n}\n\nexport async function fetchCast(movieId) {\n  const params = {\n    api_key: APY_KEY,\n    language: 'en-US',\n  };\n\n  const response = await axios.get(`/movie/${movieId}/credits`, { params });\n  const data = response.data;\n\n  return data;\n}\n\nexport async function fetchReviews(movieId) {\n  const params = {\n    api_key: APY_KEY,\n    language: 'en-US',\n  };\n\n  const response = await axios.get(`/movie/${movieId}/reviews`, { params });\n  const data = response.data;\n\n  return data;\n}\n"],"names":["Link","styled","NavLink","Container","MoviesGallegy","MovieItem","MovieName","MoviesList","movies","location","useLocation","poster","poster_path","map","id","original_title","original_name","name","title","to","state","from","src","alt","useState","trendingMovies","setTrendingMovies","error","setError","useEffect","getTrendingMovies","fetchTrendingMovies","data","results","APY_KEY","params","api_key","language","axios","response","fetchMovieById","movieId","fetchMovieByName","movieName","query","fetchCast","fetchReviews"],"sourceRoot":""}